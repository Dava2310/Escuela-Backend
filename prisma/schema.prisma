// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                 Int            @id @default(autoincrement())
  nombre             String         @db.VarChar(100)
  apellido           String         @db.VarChar(100)
  password           String         @db.VarChar(255)
  email              String         @unique @db.VarChar(100)
  cedula             String         @unique
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?
  tokens             RefreshToken[]
  invalid_tokens     InvalidToken[]
  preguntaSeguridad  String?
  respuestaSeguridad String?
  tipoUsuario        String
  estudiante         Estudiante?
  profesor           Profesor?
  administrador      Administrador?

  @@map("usuarios")
}

model RefreshToken {
  id           Int     @id @default(autoincrement())
  refreshToken String  @db.VarChar(255)
  userId       Int
  usuario      Usuario @relation(fields: [userId], references: [id])

  @@map("refreshTokens")
}

model InvalidToken {
  id             Int     @id @default(autoincrement())
  expirationTime BigInt
  accessToken    String  @db.VarChar(255)
  userId         Int
  usuario        Usuario @relation(fields: [userId], references: [id])
}

model Cursos {
  id          Int    @id @default(autoincrement())
  nombre      String
  codigo      String @unique
  descripcion String
  categoria   String

  // Relaciones
  secciones Seccion[] // Relacion con multiples secciones

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Seccion {
  id            Int                  @id @default(autoincrement())
  codigo        String               @unique
  capacidad     Int
  salon         String
  profesorId    Int
  profesor      Profesor             @relation(fields: [profesorId], references: [id])
  cursoId       Int
  curso         Cursos               @relation(fields: [cursoId], references: [id])
  horarioId     Int? // Ahora es opcional
  horario       Horario? // Relación con Horario, opcional
  estudiantes   Estudiante_Seccion[]
  certificados  Certificado[]
  inscripciones Inscripcion[]

  // Relación 1:1 con Horario
  @@map("secciones")
}

model Estudiante {
  id              Int      @id @default(autoincrement())
  fechaNacimiento DateTime
  direccion       String
  numeroTelefono  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  secciones     Estudiante_Seccion[]
  Certificados  Certificado[]
  Inscripciones Inscripcion[]

  usuarioId Int     @unique
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
}

model Estudiante_Seccion {
  idEstudiante Int
  idSeccion    Int

  seccion    Seccion    @relation(fields: [idSeccion], references: [id])
  estudiante Estudiante @relation(fields: [idEstudiante], references: [id])

  // Estado de aprobado
  aprobado Boolean? @default(false)

  @@id([idEstudiante, idSeccion])
}

model Horario {
  id          Int          @id @default(autoincrement())
  fechaInicio DateTime
  fechaFinal  DateTime
  horaInicio  String
  horaFinal   String
  dias        DiaHorario[]
  estado      Boolean      @default(true)
  seccionId   Int          @unique // Relación con Sección
  seccion     Seccion      @relation(fields: [seccionId], references: [id])
  tipo        String

  // Relación 1:1 con Sección
  @@map("horarios")
}

model DiaHorario {
  id        Int     @id @default(autoincrement())
  dia       String // Día de la semana (Lunes, Martes, etc.)
  horarioId Int // Relación con Horario
  horario   Horario @relation(fields: [horarioId], references: [id]) // Relación con Horario
}

model Profesor {
  id              Int       @id @default(autoincrement())
  profesion       String
  direccion       String
  numeroTelefono  String
  fechaNacimiento DateTime
  secciones       Seccion[]

  usuarioId Int     @unique
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
}

model Administrador {
  id        Int     @id @default(autoincrement())
  usuarioId Int     @unique
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
}

model Certificado {
  id              Int        @id @default(autoincrement())
  titulo          String
  descripcion     String
  seccionId       Int
  seccion         Seccion    @relation(fields: [seccionId], references: [id])
  fechaExpedicion DateTime
  estudianteId    Int
  estudiante      Estudiante @relation(fields: [estudianteId], references: [id])
}

model Inscripcion {
  id              Int      @id @default(autoincrement())
  referenciaPago  String
  fechaExpedicion DateTime
  banco           String
  monto           Float
  observaciones   String?

  seccionId Int
  seccion   Seccion @relation(fields: [seccionId], references: [id])

  estudianteId Int
  estudiante   Estudiante @relation(fields: [estudianteId], references: [id])

  estado String @default("En Espera") // En Espera, Aprobada, No Aprobada

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
